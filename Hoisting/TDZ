# The Temporal Dead Zone (TDZ) refers to the period between the time a variable is hoisted and the time it is initialized (assigned a value).
 Variables declared with let and const are hoisted, but they are not accessible until the code execution reaches their declaration. During this period,
  they are in the TDZ, and trying to access them will result in a ReferenceError.

# Key Points about TDZ:
Variables declared with let and const are hoisted, but they remain uninitialized until the execution reaches their declaration in the code.
Any attempt to access these variables before their declaration will throw a ReferenceError.

## The TDZ exists from the start of the enclosing scope (block or function) until the variable's declaration is encountered.

# Example:
console.log(myVar);  // ReferenceError: Cannot access 'myVar' before initialization
let myVar = 10;
console.log(myVar);  // Output: 10

# Explanation:
When JavaScript hoists the variable myVar, it knows that myVar exists within its scope but doesn’t assign any value yet.
Until the execution reaches the line let myVar = 10;, the variable myVar is in the Temporal Dead Zone.
During the TDZ, accessing myVar will throw a ReferenceError.

## Difference between var and let/const with respect to TDZ:
var variables are hoisted and initialized to undefined, so you can access them before they are declared (though the value will be undefined).

let and const are hoisted but not initialized, so accessing them before their declaration results in a ReferenceError due to the TDZ.
Example to compare var and let:
console.log(a);  // Output: undefined
var a = 5;

console.log(b);  // ReferenceError: Cannot access 'b' before initialization
let b = 10;
var a is hoisted and initialized to undefined, so it doesn't throw an error.
let b is hoisted, but it’s not initialized during the hoisting phase, so it results in a ReferenceError until the line let b = 10; is reached.

## Why does the TDZ exist?
The TDZ ensures that variables declared with let and const must be initialized before use, which helps prevent unintended behaviors that can occur with var. It enforces safer, more predictable coding practices by making it clear when variables are available for use.